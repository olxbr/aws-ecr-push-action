(()=>{var e={528:(e,r)=>{r.info=e=>{console.log(`%s INFO`,(new Date).toGMTString().replace(/.*, /,""),e.toString().replace(/\x1B\[[0-9;]*[JKmsu]/g,""))};r.warn=e=>{console.warn(`%s WARN`,(new Date).toGMTString().replace(/.*, /,""),e.toString().replace(/\x1B\[[0-9;]*[JKmsu]/g,""))};r.error=e=>{console.error(`%s ERROR`,(new Date).toGMTString().replace(/.*, /,""),e.toString().replace(/\x1B\[[0-9;]*[JKmsu]/g,""))}},608:(e,r,n)=>{const{spawnSync:t}=n(129);function info(e){n(528).info(`utils.js - ${e}`)}const executeSyncCmd=(e,r,n,o)=>{const i={...process.env,...o};if(i?.DOCKER_BUILDKIT){info(`DOCKER_BUILDKIT is set to ${i.DOCKER_BUILDKIT}`)}info(`Executing command: ${e} ${r.toString().replace(/,/g," ").replace(/[0-9a-zA-Z]{200,}(==)?/g,"**TOKEN**")}`);const s=t(e,r,i);if(s.status!==0){if(n){throw new Error(n)}throw new Error(s.stderr.toString())}info(`EXIT_CODE: ${s.status}, STDOUT: ${s.stdout.toString()}`);return s.stdout.toString()};const sortByKey=(e,r)=>e.sort((function(e,n){let t=e[r];let o=n[r];return t<o?-1:t>o?1:0}));r.executeSyncCmd=executeSyncCmd;r.sortByKey=sortByKey},129:e=>{"use strict";e.exports=require("child_process")}};var r={};function __nccwpck_require__(n){var t=r[n];if(t!==undefined){return t.exports}var o=r[n]={exports:{}};var i=true;try{e[n](o,o.exports,__nccwpck_require__);i=false}finally{if(i)delete r[n]}return o.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var n={};(()=>{var e=n;const{executeSyncCmd:r}=__nccwpck_require__(608);const filterEmpty=e=>e;function info(e){__nccwpck_require__(528).info(`cleanup.js - ${e}`)}const cleanup=()=>{info("================ Initializing docker cleanup ================");info("Listing running containers...");const e=r("docker",["ps","-aq"]).split("\n").filter(filterEmpty);info(`Total Running containers: ${e.length}`);for(let n of e){info(`Stopping container ${n}`);r("docker",["stop",n]);info(`Removing container ${n}`);r("docker",["rm",n])}if(process.env.GITHUB_RUNNER_LABELS){let e="docker system prune -f";let r="docker rmi $(docker images | egrep 'ecr|olxbr' | awk '{print $3}')";info("Found Self-hosted Runner. Clean all the mess to avoid Ephemeral Storage on k8s...");info("Docker System prune: "+__nccwpck_require__(129).spawnSync(e,{shell:true}).stdout.toString());info("Docker RMI: "+__nccwpck_require__(129).spawnSync(r,{shell:true}).stdout.toString())}else{info("No need to clean. Not Self-hosted")}info("================ Finished docker cleanup ================")};cleanup();e.cleanup=cleanup})();module.exports=n})();